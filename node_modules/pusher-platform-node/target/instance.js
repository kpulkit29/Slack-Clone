"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var extend = require("extend");
var authenticator_1 = require("./authenticator");
var base_client_1 = require("./base_client");
var HOST_BASE = 'pusherplatform.io';
var HTTPS_PORT = 443;
var Instance = (function () {
    function Instance(options) {
        if (!options.locator)
            throw new Error('Expected `instanceLocator` property in Instance options!');
        if (options.locator.split(":").length !== 3)
            throw new Error('The `locator` property is in the wrong format!');
        if (!options.serviceName)
            throw new Error('Expected `serviceName` property in Instance options!');
        if (!options.serviceVersion)
            throw new Error('Expected `serviceVersion` property in Instance otpions!');
        var splitInstance = options.locator.split(":");
        this.platformVersion = splitInstance[0];
        this.cluster = splitInstance[1];
        this.id = splitInstance[2];
        this.serviceName = options.serviceName;
        this.serviceVersion = options.serviceVersion;
        var keyParts = options.key.match(/^([^:]+):(.+)$/);
        if (!keyParts) {
            throw new Error('Invalid instance key');
        }
        this.keyId = keyParts[1];
        this.keySecret = keyParts[2];
        this.client = options.client || new base_client_1.default({
            host: options.host || this.cluster + "." + HOST_BASE,
            instanceId: this.id,
            serviceName: this.serviceName,
            serviceVersion: this.serviceVersion,
            port: options.port || HTTPS_PORT
        });
        this.authenticator = new authenticator_1.default(this.id, this.keyId, this.keySecret);
    }
    Instance.prototype.request = function (options) {
        if (options.jwt == null) {
            options = extend(options, { jwt: "" + this.authenticator.generateAccessToken({ su: true }).token });
        }
        return this.client.request(options);
    };
    Instance.prototype.authenticate = function (authenticatePayload, options) {
        return this.authenticator.authenticate(authenticatePayload, options);
    };
    Instance.prototype.authenticateWithRefreshToken = function (authenticatePayload, options) {
        return this.authenticator.authenticateWithRefreshToken(authenticatePayload, options);
    };
    Instance.prototype.generateAccessToken = function (options) {
        return this.authenticator.generateAccessToken(options);
    };
    return Instance;
}());
exports.default = Instance;
//# sourceMappingURL=instance.js.map